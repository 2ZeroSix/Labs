Числа с плавающей точкой:
	стандарт IEEE-784

	float (4 byte)
	double (8 byte)

	Представление:
		((-1)^s) * M * (B^E) = [1 bit: s - знак][8 bit: E - 127 - порядок][23 bit: M - мантисса]

	Нормализованное представление вещественных чисел:
		1.M - мантисса закодированная в поле M
		E_2 - 127 - представление порядка
		B = 2

	Пример:
		[0][01 11 11 00][0 10 00  00 00 00]
		(-1)^0 = 1
		E = [01 11 11 00] - 127 = -3
		M = 1.01

		0.00101 = 5/32 = 0.15625

	представление нуля:
		M = 0
		E = Emin - 1 = -127
		s = {0, 1}
		их 2

	представление бесконечности:
		M = 0
		E = Emax + 1;
		s = {0, 1}
		их 2
		получить можно преполнением или +-c/0

	Не числа NaN (Not a number):
		M != 0
		E = Emax + 1
		s = {0, 1}
		их 2^24 - 1
		получить можно работая с любым NaN, 0/0 и т.д.

	округление:
		до чётного
		11.4 ~ 11
		11.5 ~ 12
		14.5 ~ 14
		14.6 ~ 15

	Проблемы:
		1. Околонулевая яма
		2. неточность представления вещественных констант:
			0,2 не представимо в двоичном виде в виде конечной дроби и многие другие
		3. арифметические операции над вещественными числами неассоциативны:
			(a + b) + c != a + (b + c)
		4. сравнение вещественных чисел:
			все сравнения должны выполняться с необходимой точностью

	Денормализованные вещественных числа:
		(-1)^s * 0.M * 2^Emin 		



Д/З
написать программу, которая из побитового представления числа
1)читает число
2)выводит s, M, E
3)выводим F(n), F(n+1), F(n+1)-F(n)

